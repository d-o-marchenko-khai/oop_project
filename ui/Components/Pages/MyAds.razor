@page "/my-ads"
@using oop_project
@inject NavigationManager Navigation
@rendermode InteractiveServer

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    <MudText Typo="Typo.h4" Class="mb-4">My Advertisements</MudText>
    
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mb-4" OnClick="@(() => Navigation.NavigateTo("/add-ad"))">
        Add New Advertisement
    </MudButton>
    
    @if (advertisements == null || !advertisements.Any())
    {
        <MudText Typo="Typo.body1">You don't have any advertisements yet.</MudText>
    }
    else
    {
        <MudGrid>
            @foreach (var ad in advertisements)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Style="height: 100%;" Elevation="2">
                        <MudCardContent>
                            @if (ad.PhotoPaths != null && ad.PhotoPaths.Any() && !string.IsNullOrWhiteSpace(ad.PhotoPaths.First()))
                            {
                                <div style="height: 160px; background-color: #f0f0f0; display: flex; align-items: center; justify-content: center; margin-bottom: 10px; overflow: hidden;">
                                    <img src="@ad.PhotoPaths.First()" style="width: 100%; height: 100%; object-fit: cover;" alt="Ad image" />
                                </div>
                            }
                            else
                            {
                                <div style="height: 160px; background-color: #d3d3d3; display: flex; align-items: center; justify-content: center; margin-bottom: 10px;">
                                    <span style="color: #aaa; font-size: 1.5rem;">No Image</span>
                                </div>
                            }
                            <MudText Typo="Typo.h6" Class="mt-2">@ad.Title</MudText>
                            <MudText Typo="Typo.body2">@GetPrice(ad)</MudText>
                            <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">
                                @ad.Description
                            </MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo($"/ad/{ad.Id}"))">View</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="@(() => Navigation.NavigateTo($"/edit-ad/{ad.Id}"))">Edit</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@(() => PromoteAd(ad.Id))">Promote</MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => DeleteAd(ad.Id))">Delete</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private List<Advertisement> advertisements = new();
    
    protected override async Task OnInitializedAsync()
    {
        if (AuthState.CurrentUser == null || AuthState.CurrentUser is not RegisteredUser user)
        {
            await InvokeAsync(() => Navigation.NavigateTo("/signin"));
            return;
        }
        
        try
        {
            advertisements = user.Advertisements;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading advertisements: {ex.Message}");
            advertisements = new List<Advertisement>();
        }
    }
    
    private string GetPrice(Advertisement ad)
    {
        if (ad is SellingAdvertisement s)
            return $"{s.Price} $";
        if (ad is BuyingAdvertisement b)
            return $"{b.Price} $";
        return "-";
    }
    
    private void PromoteAd(Guid adId)
    {
        if (AuthState.CurrentUser == null || AuthState.CurrentUser is not RegisteredUser user)
        {
            return;
        }
        
        try
        {
            user.PromoteAdvertisement(adId);
            advertisements = user.Advertisements;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error promoting advertisement: {ex.Message}");
        }
    }
    
    private void DeleteAd(Guid adId)
    {
        if (AuthState.CurrentUser == null || AuthState.CurrentUser is not RegisteredUser user)
        {
            return;
        }
        
        try
        {
            user.DeleteAdvertisement(adId);
            advertisements = user.Advertisements;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting advertisement: {ex.Message}");
        }
    }
} 