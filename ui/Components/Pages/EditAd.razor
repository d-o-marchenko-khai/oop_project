@page "/edit-ad/{Id:guid}"
@using oop_project
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Hosting
@using System.IO
@inject NavigationManager Navigation
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6 d-flex flex-column align-items-center">
    <MudText Typo="Typo.h5" Class="mb-4">Edit Advertisement</MudText>
    
    @if (advertisement == null)
    {
        <MudText Typo="Typo.body1">Loading advertisement...</MudText>
    }
    else
    {
        <!-- Image Display Area using AdPhotoViewer -->
        <AdPhotoViewer ImageUrls="@GetCurrentPhotoPaths()" />

        <div class="d-flex flex-column align-items-stretch mt-4" style="gap: 16px; width: 100%; max-width: 320px;">
            <MudText Typo="Typo.subtitle1">Upload New Photos (replaces existing)</MudText>
            <InputFile OnChange="HandleFileSelected" multiple accept="image/*" class="mb-2" />
            
            @if (newlyUploadedPhotoUrls.Any())
            {
                 <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="ClearNewUploads">Clear New Uploads</MudButton>
            }
            
            <MudTextField @bind-Value="title" Label="Title" />
            
            @if (adType != AdvertisementType.Exchange)
            {
                <MudTextField @bind-Value="price" Label="Price" />
            }
            
            <MudTextField @bind-Value="description" Label="Description" Lines="4" />
        </div>
        
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="width: 100%; max-width: 320px; margin-top: 16px; margin-bottom: 8px;" OnClick="SaveAd">Save Changes</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Style="width: 100%; max-width: 320px; margin-bottom: 8px;" OnClick="PromoteAd">Promote</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error" Style="width: 100%; max-width: 320px;" OnClick="DeleteAdAndPhotos">Delete Ad & Photos</MudButton>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private Advertisement? advertisement;
    private string title = "";
    private string description = "";
    private string price = "";
    private AdvertisementType adType;

    // For new photo uploads
    private List<string> newlyUploadedPhotoUrls = new List<string>();
    private long maxFileSize = 1024 * 1024 * 5; // 5 MB

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.CurrentUser == null || AuthState.CurrentUser is not RegisteredUser user)
        {
            await InvokeAsync(() => Navigation.NavigateTo("/signin"));
            return;
        }
        
        advertisement = user.Advertisements.FirstOrDefault(a => a.Id == Id);
        
        if (advertisement == null)
        {
            Navigation.NavigateTo("/my-ads");
            return;
        }
        
        title = advertisement.Title;
        description = advertisement.Description;
        
        if (advertisement is SellingAdvertisement s)
        {
            adType = AdvertisementType.Selling;
            price = s.Price.ToString();
        }
        else if (advertisement is BuyingAdvertisement b)
        {
            adType = AdvertisementType.Buying;
            price = b.Price.ToString();
        }
        else
        {
            adType = AdvertisementType.Exchange;
        }
    }

    private List<string> GetCurrentPhotoPaths()
    {
        if (newlyUploadedPhotoUrls.Any())
        {
            return newlyUploadedPhotoUrls;
        }
        return advertisement?.PhotoPaths ?? new List<string>();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        newlyUploadedPhotoUrls.Clear(); 
        var selectedFiles = e.GetMultipleFiles(maximumFileCount: 5);

        foreach (var file in selectedFiles)
        {
            if (file.Size > maxFileSize)
            {
                Console.WriteLine($"File {file.Name} exceeds size limit.");
                continue;
            }

            try
            {
                var uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                var adsImagesDir = Path.Combine(Environment.WebRootPath, "images", "ads");
                
                if (!Directory.Exists(adsImagesDir))
                {
                    Directory.CreateDirectory(adsImagesDir);
                }

                var path = Path.Combine(adsImagesDir, uniqueFileName);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                
                newlyUploadedPhotoUrls.Add($"/images/ads/{uniqueFileName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
            }
        }
        StateHasChanged();
    }
    
    private void ClearNewUploads()
    {
        newlyUploadedPhotoUrls.Clear();
        StateHasChanged();
    }

    private void SaveAd()
    {
        if (AuthState.CurrentUser == null || AuthState.CurrentUser is not RegisteredUser user || advertisement == null)
        {
            Navigation.NavigateTo("/signin");
            return;
        }
        
        try
        {
            var updatedAd = advertisement;

            updatedAd.Title = title;
            updatedAd.Description = description;

            if (newlyUploadedPhotoUrls.Any())
            {
                updatedAd.PhotoPaths = new List<string>(newlyUploadedPhotoUrls);
            }

            if (updatedAd is SellingAdvertisement s && decimal.TryParse(price, out decimal priceSValue))
            {
                s.Price = priceSValue;
            }
            else if (updatedAd is BuyingAdvertisement b && decimal.TryParse(price, out decimal priceBValue))
            {
                b.Price = priceBValue;
            }
            
            user.UpdateAdvertisement(Id, updatedAd); 
            newlyUploadedPhotoUrls.Clear();
            Navigation.NavigateTo($"/ad/{advertisement.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating advertisement: {ex.Message}");
        }
    }
    
    private void PromoteAd()
    {
        if (AuthState.CurrentUser == null || AuthState.CurrentUser is not RegisteredUser user)
        {
            return;
        }
        
        try
        {
            user.PromoteAdvertisement(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error promoting advertisement: {ex.Message}");
        }
    }
    
    private void DeleteAdAndPhotos()
    {
        if (AuthState.CurrentUser == null || AuthState.CurrentUser is not RegisteredUser user || advertisement == null)
        {
            return;
        }
        
        try
        {
            if (advertisement.PhotoPaths != null)
            {
                foreach (var photoPath in advertisement.PhotoPaths)
                {
                    if (!string.IsNullOrWhiteSpace(photoPath))
                    {
                        var fullPath = Path.Combine(Environment.WebRootPath, photoPath.TrimStart('/'));
                        if (File.Exists(fullPath))
                        {
                            File.Delete(fullPath);
                            Console.WriteLine($"Deleted photo: {fullPath}");
                        }
                    }
                }
            }
            
            user.DeleteAdvertisement(Id);
            Navigation.NavigateTo("/my-ads");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting advertisement or photos: {ex.Message}");
        }
    }
} 